.define de 0
.define rdata 1
.define rclk 2
.define collat 3
.define dotclk 4
.define sdata 5

.define PUBLIC spike_rdata 1


.program dmd_reader_spike

; Send using an external clock on the SPI interface
; - IN pin 0 is the DATA pin

    ; initialize y with 4096 = number of pixels (128x32)
    set x, 1
    in x, 1
    in null, 15
    mov y, isr

.wrap_target

    mov x, y       ; load number of pixels
    mov isr, null  ; reset shift counter

    irq clear 4 
    wait irq 4

; this is the loop for the most significant bit
dotloop1:          
    wait 0 gpio dotclk  ; falling edge
    wait 1 gpio dotclk  ; raising edge
    in null 3           ; add 3x zero
    in pins 1           ; read pin data
    jmp x-- dotloop1

.wrap

.program dmd_framedetect_spike

; Frame detection in Spike:
; white for RDATA to go H
; check if it is still H 150-250ms later - in this case, this is the most significant bit
; which is the last plane
; now wait for RDATA to go L and H again, this is the beginning of a new frame
; based on 125MHz clock frequency we have to wait 18750-31250 clock cycles
; we use 24576 here, because it0s 0b11 << 13

    ; initialize isr with 24576
    set x, 3
    in x, 2
    in null, 13

.wrap_target

; synchronize on the least significant plane

waitrdata:
    ; wait for RDATA to measure the length of the impulse
    wait 1 gpio rdata 

    mov x, isr
delayloop:
    jmp x-- delayloop

    ; check if RDATA is still H
    jmp pin longrdata  ; jump if rdata is H

    ; rdata pin was low, wait for next 
    jmp waitrdata

longrdata:

    ; skip the next 30 lines
    set x,30
lineloop:
    wait 1 gpio rclk
    wait 0 gpio rclk
    jmp x-- lineloop

    irq 4

.wrap

% c-sdk {
static inline void dmd_reader_spike_program_init(PIO pio, uint sm, uint offset) {

    uint8_t datapin = 5;
    pio_sm_config c = dmd_reader_spike_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data pin, we don't use any other
    sm_config_set_in_pins(&c, datapin);

    // Set the pin direction at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 6, false);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 1);
    pio_gpio_init(pio, 2);
    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 4);
    pio_gpio_init(pio, 5);

    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false
        true,  // Autopull enabled
        32     // Autopull threshold
    );

    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Load our configuration, do not yet start the program
    pio_sm_init(pio, sm, offset, &c);
}
%}

% c-sdk {
static inline void dmd_framedetect_spike_program_init(PIO pio, uint sm, uint offset) {

    pio_sm_config c = dmd_framedetect_spike_program_get_default_config(offset);
    // rdata is used for jump control
    sm_config_set_jmp_pin(&c, spike_rdata);

    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false
        false, // No autopull, we don't read data from this SM
        32     // Autopull threshold
    );

    // Set the pin direction at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 6, false);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 1);
    pio_gpio_init(pio, 2);
    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 4);
    pio_gpio_init(pio, 5);

    // Load our configuration, do not yet start the program
    pio_sm_init(pio, sm, offset, &c);
}
%}