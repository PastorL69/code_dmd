.program dmd_reader_wpc

; Send using an external clock on the SPI interface
; - IN pin 0 is the DATA pin
; - Autopush is enabled, threshold 32
;
;    wait 0 pin 1

    wait 0 gpio 1 ; wait for RDATA to go L

.wrap_target

    ; initialize x with 4096 = number of pixels
    set x, 1
    in x, 1
    in null, 12
    mov x, null

    wait 1 gpio 1 ; wait for RDATA to go H
    wait 0 gpio 2 ; wait for RCLK to go L

dotloop:
    wait 1 gpio 4  ; rasing edge
    wait 0 gpio 4  ; falling edge
    in pins 1      ; read pin data

    jmp x-- dotloop
    
.wrap


% c-sdk {
static inline void dmd_reader_wpc_program_init(PIO pio, uint sm, uint offset) {

    uint8_t datapin = 5;
    pio_sm_config c = dmd_reader_wpc_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data pin, we don't use any other
    sm_config_set_in_pins(&c, datapin);

    // Set the pin direction at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 6, false);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 1);
    pio_gpio_init(pio, 2);
    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 4);
    pio_gpio_init(pio, 5);

    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false,  // Shift-to-right = false
        true,  // Autopull enabled
        32     // Autopull threshold = 32
    );

    // We only send, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Load our configuration, do not yet start the program
    pio_sm_init(pio, sm, offset, &c);
}
%}